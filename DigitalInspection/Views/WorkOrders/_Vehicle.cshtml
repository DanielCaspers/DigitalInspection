@model DigitalInspection.ViewModels.WorkOrders.WorkOrderDetailViewModel
@{
	Layout = Model.CanEdit ? "~/Views/WorkOrders/_Layout_Locked.cshtml" : "~/Views/Shared/_Layout.cshtml";
	ViewBag.Title = "Digital Inspection";
}

@using DigitalInspection.Views.Helpers;

@section TabContainer {
	@if (Model.CanEdit == false)
	{
		Html.RenderPartial("TabContainers/_WorkOrderDetailTabs", Model.TabViewModel);
	}
}

@section Toolbar{
	@if (Model.WorkOrder != null)
	{
		<div class="container-flex between ma-nav-info">
			<div>
				@if (Model.CanEdit)
				{
					using (Html.BeginForm(
						"ReleaseVehicleFileLock",
						"WorkOrders",
						new { id = Model.WorkOrder.Id },
						FormMethod.Post,
						new { style = "display: inline;" }
						))
					{
						<button type="submit"
								onclick="FormService.showProgress()"
								class="btn btn-default back-button no-margin pull-left">
							<i class="material-icons">arrow_back</i>
							Order @Model.WorkOrder.Id.Substring(3)
						</button>
					}
				}
				else
				{
					<a href="@Url.Action("Index", "WorkOrders")"
					   onclick="FormService.showProgress()"
					   class="btn btn-default back-button no-margin pull-left">
						<i class="material-icons">arrow_back</i>
						Order @Model.WorkOrder.Id.Substring(3)
					</a>
				}

			</div>

			<div class="customer-vehicle-summary-container">
				@Html.Partial("_CustomerVehicleSummary", Model.WorkOrder)
			</div>

			<div>
				@if (Model.WorkOrder.Vehicle.VIN != null)
				{
					@Ajax.RawActionLink("<i class='material-icons'>history</i>",
						"GetVehicleHistoryDialog",
						"VehicleHistory",
						new
						{
							Model.WorkOrder.Vehicle.VIN,
						},
						new AjaxOptions
						{
							HttpMethod = "POST",
							InsertionMode = InsertionMode.Replace,
							UpdateTargetId = "VehicleHistoryDynamicDialogContainer",
							OnComplete = "DialogService.show('vehicleHistoryDialog', 'vehicleHistoryDialogForm')"
						},
						new
						{
							@class = "btn btn-default no-margin no-padding-horizontal"
						})
				}
				else
				{
					<button type="button"
					        class="btn btn-default no-margin no-padding-horizontal"
					        disabled="disabled">
						<i class='material-icons'>history</i>
					</button>
				}


				@if (Model.WorkOrder.RecommendedServices != null)
				{
					<button type="button"
							class="btn btn-default bold no-margin"
							onclick="DialogService.show('editRecommendedServicesDialog', 'editRecommendedServices')">
						<span>RS</span>
					</button>
				}
				else
				{
					<button type="button"
							disabled="disabled"
							class="btn btn-default bold no-margin"
							onclick="DialogService.show('editRecommendedServicesDialog', 'editRecommendedServices')">
						<span>RS</span>
					</button>
				}
				
				@if (Model.CanEdit == false)
				{
					var materialIcon = Model.WorkOrder.Notes.All(note => note.Trim() == string.Empty) ? "chat_bubble_outline" : "chat";
					var iconHtml = string.Format("<i class='material-icons'>{0}</i>", materialIcon);

					@Ajax.RawActionLink(iconHtml,
						"GetAddInspectionWorkOrderNoteDialog",
						"Inspections",
						new
						{
							workOrderId = Model.WorkOrder.Id,
						},
						new AjaxOptions
						{
							HttpMethod = "POST",
							InsertionMode = InsertionMode.Replace,
							UpdateTargetId = "AddInspectionWorkOrderNoteDynamicDialogContainer",
							OnComplete = "DialogService.show('addInspectionWorkOrderNoteDialog', 'addInspectionWorkOrderNoteForm')"
						},
						new
						{
							@class = "btn btn-default no-margin no-padding-horizontal",
						})
				}

				@if (Model.CanEdit)
				{
					<button type="button"
							class="btn btn-default no-margin"
							onclick="FormService.submit('editVehicleForm', true)">
						<i class="material-icons">save</i>
					</button>
				}
				else
				{
					<a href="@Url.Action("_Vehicle", "WorkOrders", new {id = Model.WorkOrder.Id, canEdit = true})"
					   class="btn btn-default no-margin"
					   onclick="FormService.showProgress()">
						<i class="material-icons">edit</i>
					</a>
				}
			</div>
		</div>
	}
}

@if (Model.WorkOrder != null && Model.WorkOrder.RecommendedServices != null)
{
	@Html.Partial("../Shared/Dialogs/_EditRecommendedServicesDialog", Model.WorkOrder)
}

<div id="VehicleHistoryDynamicDialogContainer">
	@Html.Partial("../Shared/Dialogs/_VehicleHistoryDialog", Model.VehicleHistoryVM)
</div>

<div id="AddInspectionWorkOrderNoteDynamicDialogContainer">
	@Html.Partial("../Shared/Dialogs/_AddInspectionWorkOrderNoteDialog", Model.AddInspectionWorkOrderNoteVm)
</div>

<script type="text/javascript">
	DialogService.confirmLeavingUnsavedChanges_onProceed = function () {
		FormService.triggerExternalSubmit('editVehicleForm', false, true, { name: 'releaselockonly', value: 'true' });
	}
</script>

@if (Model.WorkOrder != null)
{
	<div class="container-fluid">
		<div class="jumbotron">
			@using (Ajax.BeginForm(
						"SaveVehicle",
						"WorkOrders",
						new { id = Model.WorkOrder.Id },
						new AjaxOptions
						{
							InsertionMode = InsertionMode.Replace,
							UpdateTargetId = "ajaxContentWrapper"
						}, new
						{
							id = "editVehicleForm",
							autocomplete = "off"
						}
					)
			)
			{
				<fieldset>
					<div class="row">
						<div class="col-xs-6 col-sm-4 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Vehicle.Year, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Vehicle.Year, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control", type = "number" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Vehicle.Year)
						</div>

						<div class="col-xs-6 col-sm-4 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Vehicle.Make, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Vehicle.Make, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Vehicle.Make)
						</div>

						<div class="col-xs-6 col-sm-4 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Vehicle.Model, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Vehicle.Model, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Vehicle.Model)
						</div>

						<div class="col-xs-6 col-sm-4 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Vehicle.License, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Vehicle.License, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Vehicle.License)
						</div>

						<div class="col-xs-6 col-sm-4 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Vehicle.Odometer, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Vehicle.Odometer, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control", type = "number" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Vehicle.Odometer)
						</div>

						<div class="col-xs-6 col-sm-4 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Vehicle.Color, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Vehicle.Color, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Vehicle.Color)
						</div>

						<div class="col-xs-6 col-sm-4 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Vehicle.Engine, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Vehicle.Engine, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Vehicle.Engine)
						</div>

						<div class="col-xs-6 col-sm-4 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Vehicle.Transmission, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Vehicle.Transmission, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Vehicle.Transmission)
						</div>

						<div class="col-xs-6 col-sm-4 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Vehicle.VIN, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Vehicle.VIN, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Vehicle.VIN)
						</div>
						
						<div class="col-xs-3 form-group ma-form-group">
							<div class="container-flex center">
								<div class="flex-item">
									@Html.LabelFor(m => m.WorkOrder.Vehicle.Options.Has4WD, new { @class = "control-label" })
								</div>
								<div class="checkbox ma-checkbox-inline-label">
									<label>
										@Html.CheckBoxFor(m => m.WorkOrder.Vehicle.Options.Has4WD, HtmlHelpers.ConditionalDisable(!Model.CanEdit))
									</label>
								</div>
							</div>
						</div>
						
						<div class="col-xs-3 form-group ma-form-group">
							<div class="container-flex center">
								<div class="flex-item">
									@Html.LabelFor(m => m.WorkOrder.Vehicle.Options.HasAWD, new { @class = "control-label" })
								</div>
								<div class="checkbox ma-checkbox-inline-label">
									<label>
										@Html.CheckBoxFor(m => m.WorkOrder.Vehicle.Options.HasAWD, HtmlHelpers.ConditionalDisable(!Model.CanEdit))
									</label>
								</div>
							</div>
						</div>
						
						<div class="col-xs-3 form-group ma-form-group">
							<div class="container-flex center">
								<div class="flex-item">
									@Html.LabelFor(m => m.WorkOrder.Vehicle.Options.HasAC, new { @class = "control-label" })
								</div>
								<div class="checkbox ma-checkbox-inline-label">
									<label>
										@Html.CheckBoxFor(m => m.WorkOrder.Vehicle.Options.HasAC, HtmlHelpers.ConditionalDisable(!Model.CanEdit))
									</label>
								</div>
							</div>
						</div>
						
						<div class="col-xs-3 form-group ma-form-group">
							<div class="container-flex center">
								<div class="flex-item">
									@Html.LabelFor(m => m.WorkOrder.Vehicle.Options.HasABS, new { @class = "control-label" })
								</div>
								<div class="checkbox ma-checkbox-inline-label">
									<label>
										@Html.CheckBoxFor(m => m.WorkOrder.Vehicle.Options.HasABS, HtmlHelpers.ConditionalDisable(!Model.CanEdit))
									</label>
								</div>
							</div>
						</div>
					</div>

					<div class="row">
						<!-- TODO: Fix the null issues!!!-->
						<div class="col-sm-6 form-group ma-form-group">
							@Html.Label("Work Description", new { @class = "control-label" })

							@for (int i = 0; i < Model.WorkOrder.WorkDescription.Count; i++)
							{
								@Html.TextBoxFor(m => Model.WorkOrder.WorkDescription[i], HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							}
						</div>

						<div class="col-sm-6 form-group ma-form-group">
							@Html.Label("Vehicle Notes", new { @class = "control-label" })

							@for (int i = 0; i < Model.WorkOrder.Vehicle.Notes.Count; i++)
							{
								@Html.TextBoxFor(m => Model.WorkOrder.Vehicle.Notes[i], HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							}
						</div>
					</div>

					<!-- Hidden fields for model binding -->
					@Html.HiddenFor(m => m.WorkOrder.Id)
					@Html.HiddenFor(m => m.WorkOrder.Date)
					@Html.HiddenFor(m => m.WorkOrder.ScheduleDate)
					@Html.HiddenFor(m => m.WorkOrder.CompletionDate)
					@Html.HiddenFor(m => m.WorkOrder.EmployeeId)
					@Html.HiddenFor(m => m.WorkOrder.TotalBill)
					@Html.HiddenForEnumerable(m => m.WorkOrder.Notes, "WorkOrder")
					@Html.HiddenFor(m => m.WorkOrder.ServiceAdvisor)
					@Html.HiddenFor(m => m.WorkOrder.ServiceAdvisorName)
					@Html.HiddenForEnumerable(m => m.WorkOrder.BillingSummary, "WorkOrder")
					@Html.HiddenForEnumerable(m => m.WorkOrder.RecommendedServices, true, "WorkOrder")

					@if (Model.WorkOrder.Status != null)
					{
						@Html.HiddenFor(m => m.WorkOrder.Status.Code)
						@Html.HiddenFor(m => m.WorkOrder.Status.Description)
						@Html.HiddenFor(m => m.WorkOrder.Status.Timestamp)
						@Html.HiddenFor(m => m.WorkOrder.Status.Misc)
					}
					else
					{
						@Html.HiddenFor(m => m.WorkOrder.Status)
					}

					@Html.HiddenFor(m => m.WorkOrder.Customer.Id)
					@Html.HiddenFor(m => m.WorkOrder.Customer.Name)
					@Html.HiddenForEnumerable(m => Model.WorkOrder.Customer.Notes, "WorkOrder.Customer")
					@Html.HiddenFor(m => m.WorkOrder.Customer.Address.Line1)
					@Html.HiddenFor(m => m.WorkOrder.Customer.Address.Line2)
					@Html.HiddenFor(m => m.WorkOrder.Customer.Address.City)
					@Html.HiddenFor(m => m.WorkOrder.Customer.Address.State)
					@Html.HiddenFor(m => m.WorkOrder.Customer.Address.ZIP)
					@Html.HiddenForEnumerable(m => Model.WorkOrder.Customer.PhoneNumbers, true, "WorkOrder.Customer")
				</fieldset>
			}
		</div>
	</div>
}
