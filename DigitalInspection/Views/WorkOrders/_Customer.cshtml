@model DigitalInspection.ViewModels.WorkOrderDetailViewModel
@{
	Layout = Model.CanEdit ? "~/Views/WorkOrders/_Layout_Locked.cshtml" : "~/Views/Shared/_Layout.cshtml";
	ViewBag.Title = "Digital Inspection";
}

@using DigitalInspection.Views.Helpers;

@section TabContainer {
	@if (Model.CanEdit == false)
	{
		Html.RenderPartial("TabContainers/_WorkOrderDetailTabs", Model.TabViewModel);
	}
}

@section Toolbar{
	@if (Model.WorkOrder != null)
	{
		<div class="container-flex between ma-nav-info">
			<div>
				@if (Model.CanEdit)
				{
					using (Html.BeginForm(
						 "ReleaseCustomerFileLock",
						 "WorkOrders",
						 new { id = Model.WorkOrder.Id },
						 FormMethod.Post,
						new { style="display: inline;"}
					))
					 {
						 <button type="submit"
						    onclick="FormService.showProgress()"
						    class="btn btn-default back-button no-margin pull-left">
							 <i class="material-icons">arrow_back</i>
							 Order @Model.WorkOrder.Id.Substring(3)
						 </button>
					 }
				}
				else
				{
					<a href="@Url.Action("Index", "WorkOrders")"
					   onclick="FormService.showProgress()"
					   class="btn btn-default back-button no-margin pull-left">
						<i class="material-icons">arrow_back</i>
						Order @Model.WorkOrder.Id.Substring(3)
					</a>
				}
			</div>
			
			<div class="customer-vehicle-summary-container">
				@Html.Partial("_CustomerVehicleSummary", Model.WorkOrder)
			</div>

			<div>
				@if (Model.CanEdit)
				{
					<button type="button"
							class="btn btn-default no-margin"
							onclick="FormService.submit('editCustomerForm', true)">
						<i class="material-icons">save</i>
					</button>
				}
				else
				{
					<a href="@Url.Action("_Customer", "WorkOrders", new { id = Model.WorkOrder.Id, canEdit = true })"
					   class="btn btn-default no-margin"
					   onclick="FormService.showProgress()">
						<i class="material-icons">edit</i>
					</a>
				}
			</div>
		</div>
	}
}

<script type="text/javascript">
	DialogService.confirmLeavingUnsavedChanges_onProceed = function () {
		FormService.triggerExternalSubmit('editCustomerForm', false, true, { name: 'releaselockonly', value: 'true' });
	}
</script>

@if (Model.WorkOrder != null)
{
	<div class="container-fluid">
		<div class="jumbotron">
			@using (Ajax.BeginForm(
						"SaveCustomer",
						"WorkOrders",
						new { id = Model.WorkOrder.Id },
						new AjaxOptions
						{
							InsertionMode = InsertionMode.Replace,
							UpdateTargetId = "ajaxContentWrapper"
						}, new
						{
							id = "editCustomerForm",
							autocomplete = "off"
						}
					)
			)
			{
				<fieldset>
					<div class="row">
						<div class="col-sm-6 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Customer.Name, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Customer.Name, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Customer.Name)
						</div>
					</div>

					<div class="row">
						<div class="col-xs-6 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Customer.Address.Line1, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Customer.Address.Line1, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Customer.Address.Line1)
						</div>

						<div class="col-xs-6 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Customer.Address.Line2, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Customer.Address.Line2, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Customer.Address.Line2)
						</div>
					</div>

					<div class="row">
						<div class="col-xs-6 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Customer.Address.City, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Customer.Address.City, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Customer.Address.City)
						</div>

						<div class="col-xs-3 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Customer.Address.State, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Customer.Address.State, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Customer.Address.State)
						</div>

						<div class="col-xs-3 form-group ma-form-group">
							@Html.LabelFor(m => m.WorkOrder.Customer.Address.ZIP, new { @class = "control-label" })
							@Html.TextBoxFor(m => m.WorkOrder.Customer.Address.ZIP, HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control" }))
							@Html.ValidationMessageFor(m => m.WorkOrder.Customer.Address.ZIP)
						</div>
					</div>

					<div class="row">
						<div class="col-sm-6 form-group ma-form-group">
							@Html.Label("Customer Notes", new { @class = "control-label" })

							@for (int i = 0; i < Model.WorkOrder.Customer.Notes.Count; i++)
							{
								@Html.TextBoxFor(m => Model.WorkOrder.Customer.Notes[i], HtmlHelpers.ConditionalDisable(!Model.CanEdit, new { @class = "form-control no-vertical-padding" }))
							}
						</div>
					</div>

					<!-- Hidden fields for model binding -->
					@Html.HiddenFor(m => m.WorkOrder.Id)
					@Html.HiddenFor(m => m.WorkOrder.Date)
					@Html.HiddenFor(m => m.WorkOrder.ScheduleDate)
					@Html.HiddenFor(m => m.WorkOrder.CompletionDate)
					@Html.HiddenFor(m => m.WorkOrder.EmployeeId)
					@Html.HiddenFor(m => m.WorkOrder.TotalBill)
					@Html.HiddenForEnumerable(m => m.WorkOrder.Notes, "WorkOrder")
					@Html.HiddenFor(m => m.WorkOrder.ServiceAdvisor)
					@Html.HiddenFor(m => m.WorkOrder.ServiceAdvisorName)
					@Html.HiddenForEnumerable(m => m.WorkOrder.BillingSummary, "WorkOrder")
					@Html.HiddenForEnumerable(m => m.WorkOrder.WorkDescription, "WorkOrder")
					@Html.HiddenForEnumerable(m => Model.WorkOrder.RecommendedServices, true, "WorkOrder")

					@if (Model.WorkOrder.Status != null)
					{
						@Html.HiddenFor(m => m.WorkOrder.Status.Code)
						@Html.HiddenFor(m => m.WorkOrder.Status.Description)
						@Html.HiddenFor(m => m.WorkOrder.Status.Timestamp)
						@Html.HiddenFor(m => m.WorkOrder.Status.Misc)
					}
					else
					{
						@Html.HiddenFor(m => m.WorkOrder.Status)
					}

					@Html.HiddenFor(m => m.WorkOrder.Customer.Id)
					@Html.HiddenForEnumerable(m => Model.WorkOrder.Customer.PhoneNumbers, true, "WorkOrder.Customer")

					@Html.HiddenFor(m => m.WorkOrder.Vehicle.Year)
					@Html.HiddenFor(m => m.WorkOrder.Vehicle.Make)
					@Html.HiddenFor(m => m.WorkOrder.Vehicle.Model)
					@Html.HiddenFor(m => m.WorkOrder.Vehicle.License)
					@Html.HiddenFor(m => m.WorkOrder.Vehicle.Odometer)
					@Html.HiddenFor(m => m.WorkOrder.Vehicle.Color)
					@Html.HiddenFor(m => m.WorkOrder.Vehicle.Engine)
					@Html.HiddenFor(m => m.WorkOrder.Vehicle.Transmission)
					@Html.HiddenFor(m => m.WorkOrder.Vehicle.VIN)
					@Html.HiddenForEnumerable(m => Model.WorkOrder.Vehicle.Notes, "WorkOrder.Vehicle")
				</fieldset>
			}
		</div>
	</div>
}
