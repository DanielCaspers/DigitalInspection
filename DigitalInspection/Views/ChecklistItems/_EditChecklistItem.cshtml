@model DigitalInspection.ViewModels.EditChecklistItemViewModel
@{
	Layout = "~/Views/Shared/_Layout.cshtml";
	ViewBag.Title = "Digital Inspection";
}

<script type="text/javascript">
	//http://stackoverflow.com/a/35651254/2831961
	var tagIds = JSON.parse('@Html.Raw(Json.Encode(Model.ChecklistItem.Tags.Select(t => t.Id).ToList()  ))');
	console.log(tagIds);

	MultiSelectService.show('editTagSelect');
	MultiSelectService.autoSelectOptions('editTagSelect', tagIds);
</script>

@section Toolbar {
	<div class="row">
		<a href="@Url.Action("Index", "ChecklistItems")"
		   onclick="FormService.showProgress()"
		   class="btn btn-default back-button no-margin pull-left">
			<i class="material-icons">arrow_back</i>
			@Model.ChecklistItem.Name
		</a>

		<span class="pull-right">

			@using (Html.BeginForm(
			"AddCannedResponse",
			"ChecklistItems",
			new { id = Model.ChecklistItem.Id },
			FormMethod.Post,
			new { @class = "ma-inline-form" }
		)
	)
			{
				<button class="btn btn-primary no-margin"
						onclick="FormService.showProgress()">
					Add Canned Response
				</button>
			}

			@using (Html.BeginForm(
			"AddMeasurement",
			"ChecklistItems",
			new { id = Model.ChecklistItem.Id },
			FormMethod.Post,
			new { @class = "ma-inline-form" }
		)
	)
			{
				<button class="btn btn-primary no-margin"
					onclick="FormService.showProgress()">
					Add Measurement
				</button>
			}

			<button onclick="FormService.submit('editChecklistItemForm', true)"
					class="btn btn-default no-margin">
				<i class="material-icons">save</i>
			</button>
		</span>

	</div>
}

@using (Html.BeginForm(
			"DeleteCannedResponse",
			"ChecklistItems",
			// ID is tacked on external submission via jQuery
			FormMethod.Post,
			new { id = "deleteCannedResponseForm" })
		)
{}

@using (Html.BeginForm(
			"DeleteMeasurement",
			"ChecklistItems",
			// ID is tacked on external submission via jQuery
			FormMethod.Post,
			new { id = "deleteMeasurementForm" })
		)
{}
@using (Html.BeginForm(
				"Update",
				"ChecklistItems",
				new { id = Model.ChecklistItem.Id },
				FormMethod.Post,
				new
				{
					id = "editChecklistItemForm",
					autocomplete = "off"
				}
			)
		)
{
	<div class="container-fluid">
		<div class="jumbotron">
			<fieldset>
				<div class="form-group">
					@Html.LabelFor(m => m.ChecklistItem.Name, new { @class = "control-label" })
					@Html.TextBoxFor(m => m.ChecklistItem.Name, new { @class = "form-control" })
					@Html.ValidationMessageFor(m => m.ChecklistItem.Name)
				</div>

				<div class="form-group" style="margin-top:0px;">
					@Html.LabelFor(m => m.ChecklistItem.Tags, new { @class = "control-label" })
					@Html.ListBoxFor(m => m.SelectedTagIds, new MultiSelectList(Model.Tags, "Id", "Name"),
						new { id = "editTagSelect", @class = "form-control ma-multi-select", required = "required" })
					@Html.ValidationMessageFor(m => m.SelectedTagIds)
				</div>

				@if (Model.ChecklistItem.CannedResponses.Count() > 0)
				{
					<h3>Canned Responses</h3>
					<!-- NOTE: Model binder requires a FOR loop instead of FOREACH to SEE Canned Responses & Measurements when saving-->
					for (var i = 0; i < Model.ChecklistItem.CannedResponses.Count; i++)
					{
						<div class="row">
							<div class="col-sm-11">
								<div class="form-group col-sm-6">
									@Html.LabelFor(m => Model.ChecklistItem.CannedResponses[i].Response, new { @class = "control-label" })
									@Html.TextBoxFor(m => Model.ChecklistItem.CannedResponses[i].Response, new { @class = "form-control" })
									@Html.ValidationMessageFor(m => Model.ChecklistItem.CannedResponses[i].Response)
								</div>

								<div class="form-group col-sm-6">
									@Html.LabelFor(m => Model.ChecklistItem.CannedResponses[i].Url, new { @class = "control-label" })
									@Html.TextBoxFor(m => Model.ChecklistItem.CannedResponses[i].Url, new { @class = "form-control" })
									@Html.ValidationMessageFor(m => Model.ChecklistItem.CannedResponses[i].Url)
								</div>

								<div class="form-group col-sm-12">
									@Html.LabelFor(m => Model.ChecklistItem.CannedResponses[i].Description, new { @class = "control-label" })
									@Html.TextAreaFor(m => Model.ChecklistItem.CannedResponses[i].Description, new { @class = "form-control" })
									@Html.ValidationMessageFor(m => Model.ChecklistItem.CannedResponses[i].Description)
								</div>
							</div>

							<div class="col-sm-1">
								<button onclick="FormService.triggerExternalSubmit('deleteCannedResponseForm', '@Model.ChecklistItem.CannedResponses[i].Id', true)"
										type="button"
										style="position:relative; top:135px; right:35px;"
										class="btn btn-default no-margin">
									<i class="material-icons">delete</i>
								</button>
							</div>
						</div>
					}
				}

				@if (Model.ChecklistItem.Measurements.Count() > 0)
				{
					<h3>Measurements</h3>

					for (var i = 0; i < Model.ChecklistItem.Measurements.Count; i++)
					{
						<div class="row">

							<div class="form-group col-sm-3">
								@Html.LabelFor(m => Model.ChecklistItem.Measurements[i].Label, new { @class = "control-label" })
								@Html.TextBoxFor(m => Model.ChecklistItem.Measurements[i].Label, new { @class = "form-control" })
								@Html.ValidationMessageFor(m => Model.ChecklistItem.Measurements[i].Label)
							</div>

							<div class="form-group col-sm-2">
								@Html.LabelFor(m => Model.ChecklistItem.Measurements[i].Unit, new { @class = "control-label" })
								@Html.TextBoxFor(m => Model.ChecklistItem.Measurements[i].Unit, new { @class = "form-control" })
								@Html.ValidationMessageFor(m => Model.ChecklistItem.Measurements[i].Unit)
							</div>

							<div class="form-group col-sm-2">
								@Html.LabelFor(m => Model.ChecklistItem.Measurements[i].MinValue, new { @class = "control-label" })
								@Html.TextBoxFor(m => Model.ChecklistItem.Measurements[i].MinValue, new { @class = "form-control", type = "number" })
								@Html.ValidationMessageFor(m => Model.ChecklistItem.Measurements[i].MinValue)
							</div>

							<div class="form-group col-sm-2">
								@Html.LabelFor(m => Model.ChecklistItem.Measurements[i].MaxValue, new { @class = "control-label" })
								@Html.TextBoxFor(m => Model.ChecklistItem.Measurements[i].MaxValue, new { @class = "form-control", type = "number" })
								@Html.ValidationMessageFor(m => Model.ChecklistItem.Measurements[i].MaxValue)
							</div>

							<div class="form-group col-sm-2">
								@Html.LabelFor(m => Model.ChecklistItem.Measurements[i].StepSize, new { @class = "control-label" })
								@Html.TextBoxFor(m => Model.ChecklistItem.Measurements[i].StepSize, new { @class = "form-control", type = "number", min = "1" })
								@Html.ValidationMessageFor(m => Model.ChecklistItem.Measurements[i].StepSize)
							</div>

							<div class="form-group col-sm-1">
								<button onclick="FormService.triggerExternalSubmit('deleteMeasurementForm', '@Model.ChecklistItem.Measurements[i].Id', true)"
										type="button"
										style="position:relative; top:30px; right:20px;"
										class="btn btn-default no-margin">
									<i class="material-icons">delete</i>
								</button>
							</div>
						</div>
					}
				}
			</fieldset>
		</div>
	</div>
}
