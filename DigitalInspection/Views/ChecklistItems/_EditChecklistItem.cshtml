@model DigitalInspection.ViewModels.EditChecklistItemViewModel
@{
	Layout = "~/Views/Shared/_Layout.cshtml";
	ViewBag.Title = "Digital Inspection";
}


<script type="text/javascript" src="~/Scripts/App/Shared/Services/form.service.js"></script>

@using (Html.BeginForm(
			"DeleteMeasurement",
			"ChecklistItems",
			// ID is tacked on external submission via jQuery
			FormMethod.Post,
			new { id = "deleteMeasurementForm" })
		)
{}
@using (Html.BeginForm(
				"Update",
				"ChecklistItems",
				new { id = Model.ChecklistItem.Id },
				FormMethod.Post,
				new
				{
					id = "editChecklistItemForm",
					autocomplete = "off"
				}
			)
		)
{
	<div class="container-fluid">
		<div class="jumbotron">
			<fieldset>
				<div class="form-group">
					@Html.LabelFor(m => m.ChecklistItem.Name, new { @class = "control-label" })
					@Html.TextBoxFor(m => m.ChecklistItem.Name, new { @class = "form-control" })
					@Html.ValidationMessageFor(m => m.ChecklistItem.Name)
				</div>

				<!-- TODO: Integrate tags into ChecklistItem model-->
				@*<div class="form-group" style="margin-top:0px;">
				@Html.LabelFor(m => m.ChecklistItem.Tags, new { @class = "control-label" })
				@Html.ListBoxFor(m => m.ChecklistItem.Tags, new MultiSelectList(Model.ChecklistItem.Tags, "Id", "Name"), new { @class = "form-control ma-multi-select", required = "required" })
				@Html.ValidationMessageFor(m => m.ChecklistItem.Tags)
			</div>*@

				@if (Model.ChecklistItem.Measurements.Count() > 0)
				{
					<h3>Measurements</h3>
				}

				<!-- NOTE: Model binder requires a FOR loop instead of FOREACH to SEE Measurements when saving-->
				@for (var i = 0; i < Model.ChecklistItem.Measurements.Count; i++)
				{
					<div class="form-group" id="@Model.ChecklistItem.Measurements[i].Id">
						<div class="col-sm-3">
							@Html.LabelFor(m => Model.ChecklistItem.Measurements[i].Label, new { @class = "control-label" })
							@Html.TextBoxFor(m => Model.ChecklistItem.Measurements[i].Label, new { @class = "form-control" })
							@Html.ValidationMessageFor(m => Model.ChecklistItem.Measurements[i].Label)
						</div>

						<div class="col-sm-2">
							@Html.LabelFor(m => Model.ChecklistItem.Measurements[i].Unit, new { @class = "control-label" })
							@Html.TextBoxFor(m => Model.ChecklistItem.Measurements[i].Unit, new { @class = "form-control" })
							@Html.ValidationMessageFor(m => Model.ChecklistItem.Measurements[i].Unit)
						</div>

						<div class="col-sm-2">
							@Html.LabelFor(m => Model.ChecklistItem.Measurements[i].MinValue, new { @class = "control-label" })
							@Html.TextBoxFor(m => Model.ChecklistItem.Measurements[i].MinValue, new { @class = "form-control", type = "number" })
							@Html.ValidationMessageFor(m => Model.ChecklistItem.Measurements[i].MinValue)
						</div>

						<div class="col-sm-2">
							@Html.LabelFor(m => Model.ChecklistItem.Measurements[i].MaxValue, new { @class = "control-label" })
							@Html.TextBoxFor(m => Model.ChecklistItem.Measurements[i].MaxValue, new { @class = "form-control", type = "number" })
							@Html.ValidationMessageFor(m => Model.ChecklistItem.Measurements[i].MaxValue)
						</div>

						<div class="col-sm-2">
							@Html.LabelFor(m => Model.ChecklistItem.Measurements[i].StepSize, new { @class = "control-label" })
							@Html.TextBoxFor(m => Model.ChecklistItem.Measurements[i].StepSize, new { @class = "form-control", type = "number", min = "1" })
							@Html.ValidationMessageFor(m => Model.ChecklistItem.Measurements[i].StepSize)
						</div>

						<div class="col-sm-1">
							<button onclick="FormService.triggerExternalSubmit('deleteMeasurementForm', '@Model.ChecklistItem.Measurements[i].Id')"
									type="button"
									style="position:relative; top:30px; right:20px;"
									class="btn btn-default no-margin">
								<i class="material-icons">delete</i>
							</button>
						</div>

					</div>
				}

			</fieldset>
		</div>
	</div>
}

@section Toolbar {
	<div class="row">
		<a href="@Url.Action("Index", "ChecklistItems")"
		   class="btn btn-default back-button no-margin pull-left">
			<i class="material-icons">arrow_back</i>
			@Model.ChecklistItem.Name
		</a>

		<span class="pull-right">

			<button class="btn btn-primary no-margin">
				Add Canned Response
			</button>

			@using (Html.BeginForm(
					"AddMeasurement",
					"ChecklistItems",
					new { id = Model.ChecklistItem.Id },
					FormMethod.Post,
					new { @class = "ma-inline-form"}
				)
			)
			{
				<button class="btn btn-primary no-margin">
					Add Measurement
				</button>
			}

			<!-- Requires use of jQuery for submission because this is defined outside the form -->
			<button onclick="$('#editChecklistItemForm').submit()"
					class="btn btn-default no-margin">
				<i class="material-icons">save</i>
			</button>
		</span>

	</div>
}